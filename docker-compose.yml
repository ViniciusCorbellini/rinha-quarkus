# ------------------------------------------------------------
# Define todos os serviços que compõem a aplicação.
# Cada serviço será um container que se conecta em rede.
# ------------------------------------------------------------
services:

  # ----------------------------------------------------------
  # Serviço do Banco de Dados PostgreSQL
  # Usa a imagem oficial do PostgreSQL versão 15
  # ----------------------------------------------------------
  postgres:
    image: postgres:15-alpine
    container_name: postgres
    restart: always

    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: postgres_api_db
      POSTGRES_HOST_AUTH_METHOD: trust

    volumes:
      - pgdata:/var/lib/postgresql/data
      - ./sql/init.sql:/docker-entrypoint-initdb.d/init.sql:ro

    deploy:
      resources:
        limits:
          cpus: "0.50"
          memory: "120MB"

    ports:
      - "5433:5432"

    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres -d postgres_api_db" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # ----------------------------------------------------------
  # Primeira instância da aplicação Quarkus
  # Conecta ao banco de dados e expõe a porta 3001 internamente
  # ----------------------------------------------------------
  app1:
    build:
      context: ./
      dockerfile: src/main/docker/Dockerfile.native

    container_name: app1

    environment:
      PORT: 3001
      HOSTNAME: app1
      QUARKUS_DATASOURCE_JDBC_URL: jdbc:postgresql://postgres:5432/postgres_api_db
      QUARKUS_DATASOURCE_USERNAME: postgres
      QUARKUS_DATASOURCE_PASSWORD: postgres

    expose:
      - "3001"

    depends_on:
      postgres:
        condition: service_healthy

    deploy:
      resources:
        limits:
          cpus: "0.45"
          memory: "220MB"

    restart: unless-stopped

  # ----------------------------------------------------------
  # Segunda instância da aplicação Quarkus
  # Replica a configuração de app1 para balanceamento de carga
  # ----------------------------------------------------------
  app2:
    build:
      context: ./
      dockerfile: src/main/docker/Dockerfile.native

    container_name: app2

    environment:
      PORT: 3002
      HOSTNAME: app2
      QUARKUS_DATASOURCE_JDBC_URL: jdbc:postgresql://postgres:5432/postgres_api_db
      QUARKUS_DATASOURCE_USERNAME: postgres
      QUARKUS_DATASOURCE_PASSWORD: postgres

    expose:
      - "3002"

    depends_on:
      postgres:
        condition: service_healthy

    deploy:
      resources:
        limits:
          cpus: "0.45"
          memory: "220MB"

    restart: unless-stopped

  # ----------------------------------------------------------
  # Serviço NGINX que age como balanceador de carga
  # Distribui requisições entre app1 e app2
  # ----------------------------------------------------------
  nginx:
    image: nginx:stable-alpine
    container_name: nginx

    ports:
      - "9999:9999"

    volumes:
      - ./nginx/default.conf:/etc/nginx/nginx.conf:ro

    depends_on:
      - app1
      - app2

    deploy:
      resources:
        limits:
          cpus: "0.10"
          memory: "15MB"

    restart: unless-stopped

# ------------------------------------------------------------
# Volumes nomeados para persistência de dados
# pgdata é usado pelo serviço postgres
# ------------------------------------------------------------
volumes:
  pgdata:


